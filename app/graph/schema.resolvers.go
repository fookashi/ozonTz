package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.70

import (
	"app/graph/model"
	"context"
	"errors"
	"fmt"

	"github.com/google/uuid"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, username string) (*model.User, error) {
	return r.UserService.CreateUser(ctx, username)
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, userID string, title string, content string, isCommentable bool) (*model.Post, error) {
	parsedUserId, err := uuid.Parse(userID)
	if err != nil {
		return nil, fmt.Errorf("invalid user ID format")
	}
	return r.PostService.CreatePost(ctx, parsedUserId, title, content, isCommentable)
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, userID string, postID string, parentID *string, content string) (*model.Comment, error) {
	userId, err := uuid.Parse(userID)
	if err != nil {
		return nil, errors.New("invalid user ID format")
	}

	postId, err := uuid.Parse(postID)
	if err != nil {
		return nil, errors.New("invalid post ID format")
	}

	var parentId *uuid.UUID
	if parentID != nil {
		parsedParentID, err := uuid.Parse(*parentID)
		if err != nil {
			return nil, errors.New("invalid parent comment ID format")
		}
		parentId = &parsedParentID
	}

	return r.CommentService.CreateComment(ctx, userId, postId, parentId, content)
}

// TogglePostComments is the resolver for the togglePostComments field.
func (r *mutationResolver) TogglePostComments(ctx context.Context, postID string, editor string, enabled bool) (string, error) {
	parsedPostID, err := uuid.Parse(postID)
	if err != nil {
		return postID, fmt.Errorf("invalid post ID format")
	}

	parsedEditorId, err := uuid.Parse(editor)
	if err != nil {
		return postID, fmt.Errorf("invalid post ID format")
	}

	return postID, r.PostService.TogglePostComments(ctx, parsedPostID, parsedEditorId, enabled)
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	userId, err := uuid.Parse(id)
	if err != nil {
		return nil, fmt.Errorf("invalid ID format")
	}

	return r.UserService.GetUser(ctx, userId)
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	postId, err := uuid.Parse(id)
	if err != nil {
		return nil, fmt.Errorf("invalid post ID format")
	}

	return r.PostService.GetPostById(ctx, postId)
}

// Replies is the resolver for the replies field.
func (r *queryResolver) Replies(ctx context.Context, commentID string, limit int32, offset int32) ([]*model.Comment, error) {
	panic(fmt.Errorf("not implemented: Replies - replies"))
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, limit int32, offset int32, sortBy *model.SortBy) ([]*model.Post, error) {
	return r.PostService.GetPosts(ctx, int(limit), int(offset), sortBy)
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
