// Code generated by MockGen. DO NOT EDIT.
// Source: pubsub.go

// Package mock_pubsub is a generated GoMock package.
package mock_pubsub

import (
	model "app/graph/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockPubSubClient is a mock of PubSubClient interface.
type MockPubSubClient struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubClientMockRecorder
}

// MockPubSubClientMockRecorder is the mock recorder for MockPubSubClient.
type MockPubSubClientMockRecorder struct {
	mock *MockPubSubClient
}

// NewMockPubSubClient creates a new mock instance.
func NewMockPubSubClient(ctrl *gomock.Controller) *MockPubSubClient {
	mock := &MockPubSubClient{ctrl: ctrl}
	mock.recorder = &MockPubSubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubSubClient) EXPECT() *MockPubSubClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPubSubClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPubSubClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPubSubClient)(nil).Close))
}

// PublishComment mocks base method.
func (m *MockPubSubClient) PublishComment(ctx context.Context, postId uuid.UUID, comment *model.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishComment", ctx, postId, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishComment indicates an expected call of PublishComment.
func (mr *MockPubSubClientMockRecorder) PublishComment(ctx, postId, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishComment", reflect.TypeOf((*MockPubSubClient)(nil).PublishComment), ctx, postId, comment)
}

// SubscribeOnComments mocks base method.
func (m *MockPubSubClient) SubscribeOnComments(ctx context.Context, postID uuid.UUID) (<-chan *model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeOnComments", ctx, postID)
	ret0, _ := ret[0].(<-chan *model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeOnComments indicates an expected call of SubscribeOnComments.
func (mr *MockPubSubClientMockRecorder) SubscribeOnComments(ctx, postID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeOnComments", reflect.TypeOf((*MockPubSubClient)(nil).SubscribeOnComments), ctx, postID)
}
