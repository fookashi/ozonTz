// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	model "app/graph/model"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIUserService) CreateUser(ctx context.Context, username string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, username)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserServiceMockRecorder) CreateUser(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserService)(nil).CreateUser), ctx, username)
}

// GetUser mocks base method.
func (m *MockIUserService) GetUser(ctx context.Context, id uuid.UUID) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIUserServiceMockRecorder) GetUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIUserService)(nil).GetUser), ctx, id)
}

// MockIPostService is a mock of IPostService interface.
type MockIPostService struct {
	ctrl     *gomock.Controller
	recorder *MockIPostServiceMockRecorder
}

// MockIPostServiceMockRecorder is the mock recorder for MockIPostService.
type MockIPostServiceMockRecorder struct {
	mock *MockIPostService
}

// NewMockIPostService creates a new mock instance.
func NewMockIPostService(ctrl *gomock.Controller) *MockIPostService {
	mock := &MockIPostService{ctrl: ctrl}
	mock.recorder = &MockIPostServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIPostService) EXPECT() *MockIPostServiceMockRecorder {
	return m.recorder
}

// CreatePost mocks base method.
func (m *MockIPostService) CreatePost(ctx context.Context, userId uuid.UUID, title, content string, isCommentable bool) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePost", ctx, userId, title, content, isCommentable)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePost indicates an expected call of CreatePost.
func (mr *MockIPostServiceMockRecorder) CreatePost(ctx, userId, title, content, isCommentable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePost", reflect.TypeOf((*MockIPostService)(nil).CreatePost), ctx, userId, title, content, isCommentable)
}

// GetPostById mocks base method.
func (m *MockIPostService) GetPostById(ctx context.Context, id uuid.UUID) (*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPostById", ctx, id)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPostById indicates an expected call of GetPostById.
func (mr *MockIPostServiceMockRecorder) GetPostById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPostById", reflect.TypeOf((*MockIPostService)(nil).GetPostById), ctx, id)
}

// GetPosts mocks base method.
func (m *MockIPostService) GetPosts(ctx context.Context, limit, offset int, sortBy *model.SortBy) ([]*model.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPosts", ctx, limit, offset, sortBy)
	ret0, _ := ret[0].([]*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPosts indicates an expected call of GetPosts.
func (mr *MockIPostServiceMockRecorder) GetPosts(ctx, limit, offset, sortBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPosts", reflect.TypeOf((*MockIPostService)(nil).GetPosts), ctx, limit, offset, sortBy)
}

// TogglePostComments mocks base method.
func (m *MockIPostService) TogglePostComments(ctx context.Context, postId, editorId uuid.UUID, enabled bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TogglePostComments", ctx, postId, editorId, enabled)
	ret0, _ := ret[0].(error)
	return ret0
}

// TogglePostComments indicates an expected call of TogglePostComments.
func (mr *MockIPostServiceMockRecorder) TogglePostComments(ctx, postId, editorId, enabled interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TogglePostComments", reflect.TypeOf((*MockIPostService)(nil).TogglePostComments), ctx, postId, editorId, enabled)
}
